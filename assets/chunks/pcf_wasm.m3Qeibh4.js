let s,l=0,u=null;function b(){return(u===null||u.byteLength===0)&&(u=new Uint8Array(s.memory.buffer)),u}const y=typeof TextEncoder<"u"?new TextEncoder("utf-8"):{encode:()=>{throw Error("TextEncoder not available")}},A=typeof y.encodeInto=="function"?function(e,n){return y.encodeInto(e,n)}:function(e,n){const t=y.encode(e);return n.set(t),{read:e.length,written:t.length}};function h(e,n,t){if(t===void 0){const c=y.encode(e),o=n(c.length,1)>>>0;return b().subarray(o,o+c.length).set(c),l=c.length,o}let i=e.length,a=n(i,1)>>>0;const d=b();let r=0;for(;r<i;r++){const c=e.charCodeAt(r);if(c>127)break;d[a+r]=c}if(r!==i){r!==0&&(e=e.slice(r)),a=t(a,i,i=r+e.length*3,1)>>>0;const c=b().subarray(a+r,a+i),o=A(e,c);r+=o.written,a=t(a,i,r,1)>>>0}return l=r,a}function W(e){return e==null}let f=null;function w(){return(f===null||f.buffer.detached===!0||f.buffer.detached===void 0&&f.buffer!==s.memory.buffer)&&(f=new DataView(s.memory.buffer)),f}const g=typeof TextDecoder<"u"?new TextDecoder("utf-8",{ignoreBOM:!0,fatal:!0}):{decode:()=>{throw Error("TextDecoder not available")}};typeof TextDecoder<"u"&&g.decode();function x(e,n){return e=e>>>0,g.decode(b().subarray(e,e+n))}function S(e,n,t){let i,a;try{const c=s.__wbindgen_add_to_stack_pointer(-16),o=h(n,s.__wbindgen_malloc,s.__wbindgen_realloc),m=l;s.get_pc(c,e,o,m,W(t)?16777215:t?1:0);var d=w().getInt32(c+4*0,!0),r=w().getInt32(c+4*1,!0);return i=d,a=r,x(d,r)}finally{s.__wbindgen_add_to_stack_pointer(16),s.__wbindgen_free(i,a,1)}}async function T(e,n){if(typeof Response=="function"&&e instanceof Response){if(typeof WebAssembly.instantiateStreaming=="function")try{return await WebAssembly.instantiateStreaming(e,n)}catch(i){if(e.headers.get("Content-Type")!="application/wasm")console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n",i);else throw i}const t=await e.arrayBuffer();return await WebAssembly.instantiate(t,n)}else{const t=await WebAssembly.instantiate(e,n);return t instanceof WebAssembly.Instance?{instance:t,module:e}:t}}function p(){const e={};return e.wbg={},e}function _(e,n){return s=e.exports,M.__wbindgen_wasm_module=n,f=null,u=null,s}function D(e){if(s!==void 0)return s;typeof e<"u"&&Object.getPrototypeOf(e)===Object.prototype?{module:e}=e:console.warn("using deprecated parameters for `initSync()`; pass a single object instead");const n=p();e instanceof WebAssembly.Module||(e=new WebAssembly.Module(e));const t=new WebAssembly.Instance(e,n);return _(t,e)}async function M(e){if(s!==void 0)return s;typeof e<"u"&&Object.getPrototypeOf(e)===Object.prototype?{module_or_path:e}=e:console.warn("using deprecated parameters for the initialization function; pass a single object instead"),typeof e>"u"&&(e=new URL("/assets/pcf_wasm_bg.DuSHaRgJ.wasm",import.meta.url));const n=p();(typeof e=="string"||typeof Request=="function"&&e instanceof Request||typeof URL=="function"&&e instanceof URL)&&(e=fetch(e));const{instance:t,module:i}=await T(await e,n);return _(t,i)}export{M as default,S as get_pc,D as initSync};
